package com.example.harjoitustyoolio;

import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.drawerlayout.widget.DrawerLayout;

import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.StrictMode;
import android.text.Editable;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.google.android.material.navigation.NavigationView;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

public class MainActivity extends AppCompatActivity {

    private Spinner spinner;
    private TextView print;
    private String name = "";
    private String id = "";
    private EditText editTextDate;
    private EditText editTextTime;
    private ListView listView;
    private int index = 1000000000;
    Context context = null;

    //sivuvalikkoa varten..
    private DrawerLayout dl;
    private ActionBarDrawerToggle abdt;

    int hour;
    int minute;
    //DatePickerDialog.OnDateSetListener setListener;
    Theatres theatres = new Theatres();

    ArrayList<String> dateList = new ArrayList<>();

    private String file = "test2.txt";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
         context = MainActivity.this;

        System.out.println("KANSION SIJAINTI " + context.getFilesDir());

        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);

        dl = (DrawerLayout) findViewById(R.id.dl);
        abdt = new ActionBarDrawerToggle(this,dl,R.string.Open,R.string.Close);
        abdt.setDrawerIndicatorEnabled(true);

        dl.addDrawerListener(abdt);
        abdt.syncState();

        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        NavigationView nav_view = (NavigationView) findViewById(R.id.nav_view);


        nav_view.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(@NonNull MenuItem item) {
                int id = item.getItemId();

                //tähän käy myös switch rakenne eli switch(id){case id == R.id.frontpage .. return tai break}
                //valitaan sivupalkista haluttu toiminto

                //tää etusivu vie alotusnäytölle (tähän korjaus)
                if(id == R.id.frontpage){
                    Toast.makeText(MainActivity.this, "Etusivu", Toast.LENGTH_SHORT).show();
                    //onBackPressed();
                    Intent myintent = new Intent(context, MainActivity.class);
                    context.startActivity(myintent);
                }
                else if(id == R.id.movies){
                    Toast.makeText(MainActivity.this, "Omat elokuvat", Toast.LENGTH_SHORT).show();
                    //startActivity vaihtaa sitä activiteettiä mikä on aktiivisena poistaen vanhan muistista
                    //Intent myintent = new Intent(MainActivity.this, NewActivity.class);
                    //StartActivity(myintent);
                    Intent myintent = new Intent(context, Login.class);
                    context.startActivity(myintent);
                }
                else if(id == R.id.logOut){
                    Toast.makeText(MainActivity.this, "Kirjaudu ulos", Toast.LENGTH_SHORT).show();
                }
                return true;
            }
        });

        spinner = (Spinner) findViewById(R.id.spinner);
        print = (TextView) findViewById(R.id.textView);
        editTextDate = (EditText) findViewById(R.id.editTextTextPersonName);
        editTextTime = (EditText) findViewById(R.id.editTextTextPersonName2);
        listView = (ListView) findViewById(R.id.listview);


        Calendar calendar = Calendar.getInstance();
        final int year = calendar.get(Calendar.YEAR);
        final int month = calendar.get(Calendar.MONTH);
        final int day = calendar.get(Calendar.DAY_OF_MONTH);
        hour = calendar.get(Calendar.HOUR_OF_DAY);
        minute = calendar.get(Calendar.MINUTE);


        editTextTime.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                TimePickerDialog timePickerDialog = new TimePickerDialog(MainActivity.this, new TimePickerDialog.OnTimeSetListener() {
                    @Override
                    public void onTimeSet(TimePicker timePicker, int i, int i1) {
                        String minute2 = String.format("%02d", i1);
                        String time = i + ":" + minute2;
                        editTextTime.setText(time);
                    }
                }, hour, minute, true);
                timePickerDialog.show();
            }
        });



        editTextDate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                DatePickerDialog datePickerDialog = new DatePickerDialog(MainActivity.this, new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker datePicker, int i, int i1, int i2) {
                        i1 = i1 + 1;
                        String d = String.format("%02d", i2);
                        String m = String.format("%02d", i1);
                        String date1 = d+"."+m+"."+i;
                        editTextDate.setText(date1);
                    }
                }, year, month,day);
                datePickerDialog.show();
            }
        });
        theatres.readXML();

        ArrayAdapter spinnerAdapter = new ArrayAdapter<>(MainActivity.this, android.R.layout.simple_spinner_dropdown_item, theatres.movieTheaters);
        spinner.setAdapter(spinnerAdapter);
        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
            }
            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {
            }
        });

    }

    //liittyy sivupalkkiin..
    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        return abdt.onOptionsItemSelected(item) || super.onOptionsItemSelected(item);
    }


    /* Takes information from spinner, editTextDate and editTextTime and sends them to readDateXML -method.
Prints movies to ListView*/
    public void showMovies(View v) {
        String chosenItem = spinner.getSelectedItem().toString();
        Editable chosenDate = editTextDate.getText();
        Editable chosenTime = editTextTime.getText();
        if(String.valueOf(chosenDate).equals("Pick date")) {
            System.out.println("PÄIVÄÄ EI VALITTU");
            Toast.makeText(MainActivity.this, "Choose a date first!", Toast.LENGTH_SHORT).show();
        }else if(String.valueOf(chosenTime).equals("Pick time")){
            Toast.makeText(MainActivity.this, "Choose a time first!", Toast.LENGTH_SHORT).show();
        }else if(String.valueOf(chosenDate).equals("Pick date")&&String.valueOf(chosenTime).equals("Pick time")){
            Toast.makeText(MainActivity.this, "Choose a date and time first!", Toast.LENGTH_SHORT).show();
        }
        else{
            saveAllMovies();
            theatres.readDateXML(chosenItem, chosenDate, chosenTime);
            ArrayAdapter listAdapter = new ArrayAdapter(this, android.R.layout.simple_list_item_1, theatres.movieList);
            listView.setAdapter(listAdapter);
            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                @Override
                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                    index = i;
                }
            });
        }
    }

    public void saveMovieToList(View v){
        String writtenReview = "Give an review";
        int numberReview = 0;
        //ArrayList<MovieList> watchedMovies = new ArrayList<MovieList>();
        ArrayList<String> movies = new ArrayList<>();
        String chosenMovie = (String) listView.getItemAtPosition(index);
        Editable chosenDate = editTextDate.getText();
        //watchedMovies.add(new MovieList(chosenMovie, chosenDate, writtenReview, numberReview));
        movies.add(chosenMovie);
        //Nää vois viedä johonkin metodiin, jossa movies menee spinneriin, ja sit watchedMovies muihin tietoihin.
        //Printtaaminen ja tallentaminen if (.equals()) homman kautta

    }

    /*Checks if movies shown on chosen date are archived. If not, then adds them to a file.*/

    public void saveAllMovies(){
        Editable chosenDate = editTextDate.getText();
        String date = String.valueOf(chosenDate);
        System.out.println(date);
        System.out.println(chosenDate);
        int x = checkFile();
        if(x == 0){
            try {
                DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
                String url = "https://www.finnkino.fi/xml/Schedule/?dt=" + chosenDate;
                System.out.println(url);
                Document doc = builder.parse(url);
                doc.getDocumentElement().normalize();
                String movieName;
                String movieTime;
                String movieID;
                System.out.println("root element: " + doc.getDocumentElement().getNodeName());
                NodeList nList = doc.getDocumentElement().getElementsByTagName("Show");

                File path = getApplicationContext().getFilesDir();

                for (int i = 0; i < nList.getLength(); i++) {
                    Node node = nList.item(i);
                    if (node.getNodeType() == Node.ELEMENT_NODE) {
                        Element element = (Element) node;
                        movieID = element.getElementsByTagName("ID").item(0).getTextContent();
                        //System.out.println(movieID);
                        movieName = element.getElementsByTagName("Title").item(0).getTextContent();
                        movieTime = element.getElementsByTagName("dttmShowStart").item(0).getTextContent();

                        //Parses time = removes seconds etc.
                        String time_movie = movieTime.substring(movieTime.length() - 8, movieTime.length() - 3);

                        //Saves all movies to an archive
                        String content = movieName + ";" + time_movie + ";" + date + ";" + movieID + "\n";

                        try {
                            FileOutputStream fos = new FileOutputStream(new File(path, file), true);
                            fos.write(content.getBytes());
                            fos.close();

                        } catch (FileNotFoundException e) {
                            Log.e("FileNotFound", "File not found");
                        } catch (IOException e) {
                            Log.e("IOException", "Input mistake");
                        }
                    }
                }
                System.out.println(url);
            } catch (IOException | SAXException | ParserConfigurationException e){
                System.out.println("VIRHE");
                e.printStackTrace();
            } finally {
                System.out.println("#######DONE#######");
            }
        }
    }

    public int checkFile(){
        int n = 0;
        Editable chosenDate = editTextDate.getText();
        String date1 = String.valueOf(chosenDate);
        try{
            InputStream ins = context.openFileInput(file);
            BufferedReader br = new BufferedReader(new InputStreamReader(ins));
            String line;
            while((line = br.readLine()) != null){
                if(line.contains(date1)){
                    n = 1;
                }
            }
            ins.close();
        }catch (IOException e){
            Log.e("IOException", "IO exception");
        }
        return n;
    }

}
