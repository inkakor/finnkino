package com.example.harjoitustyoolio;

import android.text.Editable;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

// inkan koodissa tää MovieTheater
public class Theatres {
    ArrayList<TheatreList> movieTheaters = new ArrayList<>();
    ArrayList<String> movieList = new ArrayList<>();
    private String name = "";
    private String id = "";
    private String movieName = "";
    private String movieTime = "";
    public Theatres(){}

    public void readXML(){
        try {
            System.out.println("###########READXML########");
            DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            String url = "https://www.finnkino.fi/xml/TheatreAreas/";
            Document doc = builder.parse(url);
            doc.getDocumentElement().normalize();
            System.out.println("root element: " + doc.getDocumentElement().getNodeName());
            NodeList nList = doc.getDocumentElement().getElementsByTagName("TheatreArea");
            if(!movieTheaters.isEmpty()){
                movieTheaters.clear();
            }
            for (int i = 0; i < nList.getLength(); i++) {
                Node node = nList.item(i);
                if(node.getNodeType() == Node.ELEMENT_NODE){
                    Element element = (Element) node;
                    id = element.getElementsByTagName("ID").item(0).getTextContent();
                    name = element.getElementsByTagName("Name").item(0).getTextContent();
                    if(name.contains(":")) {
                        //movieTheaters.add(new MovieTheaterInformation(name, id));
                        movieTheaters.add(new TheatreList(name, id));
                    }
                }
            }
        } catch (IOException | SAXException | ParserConfigurationException e){
            e.printStackTrace();
        } finally {
            System.out.println("#######DONE#######");
        }
    }

    //This method reads XML-file, that has movie information. Parses movies and adds them to a list.
    public void readDateXML(String theater, Editable date, Editable time){
        String id = "";
        String s1 = "";
        System.out.println("##########" + time);
        for (int i = 0; i < movieTheaters.size(); i++) {
            if(theater.equals(movieTheaters.get(i).name)){
                id = movieTheaters.get(i).id;
            }
        }
        try {
            DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            String url = "https://www.finnkino.fi/xml/Schedule/?area=" + id + "&dt=" + date;
            System.out.println("###########"+url);
            Document doc = builder.parse(url);
            doc.getDocumentElement().normalize();
            System.out.println("root element: " + doc.getDocumentElement().getNodeName());
            NodeList nList = doc.getDocumentElement().getElementsByTagName("Show");
            if(!movieList.isEmpty()){
                movieList.clear();
            }
            for (int i = 0; i < nList.getLength(); i++) {
                Node node = nList.item(i);
                if(node.getNodeType() == Node.ELEMENT_NODE){
                    Element element = (Element) node;
                    //movieID = element.getElementsByTagName("ID").item(0).getTextContent();
                    //System.out.println(movieID);
                    movieName = element.getElementsByTagName("Title").item(0).getTextContent();
                    movieTime = element.getElementsByTagName("dttmShowStart").item(0).getTextContent();

                    //Parses time = removes seconds etc.
                    String time_movie = movieTime.substring(movieTime.length() - 8, movieTime.length() - 3);

                    SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");

                    //time = t1 = time chosen by user, time_movie = t2 = movie time
                    Date t1 = sdf.parse(String.valueOf(time));
                    Date t2 = sdf.parse(time_movie);

                    //If user's time is before movie time, movie is added to the list
                    if(t1.before(t2)){
                        s1 = movieName + "    " + time_movie;
                        movieList.add(s1);
                    }
                }
            }
            System.out.println(url);
        } catch (IOException | SAXException | ParserConfigurationException | ParseException e){
            System.out.println("VIRHE");
            e.printStackTrace();
        } finally {
            System.out.println("#######DONE#######");
        }
    }


}


